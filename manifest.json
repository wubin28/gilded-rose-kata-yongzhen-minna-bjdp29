{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\nException in thread \"main\" java.lang.NoClassDefFoundError: GildedRoseTest (wrong name: com/gildedrose/GildedRoseTest)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:760)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:455)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:73)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:367)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:361)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:360)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:259)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:83)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","GiledeRose.java":"package com.gildedrose;\n\nclass GildedRose {\n    Item[] items;\n\n    public GildedRose(Item[] items) {\n        this.items = items;\n    }\n\n    public void updateQuality() {\n        for (int i = 0; i < items.length; i++) {\n            if (!items[i].name.equals(\"Aged Brie\")\n                    && !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                if (items[i].quality > 0) {\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].quality = items[i].quality - 1;\n                    }\n                }\n            } else {\n                if (items[i].quality < 50) {\n                    items[i].quality = items[i].quality + 1;\n\n                    if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].sellIn < 11) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn < 6) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                items[i].sellIn = items[i].sellIn - 1;\n            }\n\n            if (items[i].sellIn < 0) {\n                if (!items[i].name.equals(\"Aged Brie\")) {\n                    if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality > 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n                } else {\n                    if (items[i].quality < 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n                }\n            }\n        }\n    }\n}\n","GildedRoseTest.java":"package com.gildedrose;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class GildedRoseTest {\n\n    @Test\n    public void foo() {\n        Item[] items = new Item[] { new Item(\"foo\", 0, 0) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(\"fixme\", app.items[0].name);\n    }\n}\n","Item.java":"package com.gildedrose;\n\npublic class Item {\n\n    public String name;\n\n    public int sellIn;\n\n    public int quality;\n\n    public Item(String name, int sellIn, int quality) {\n        this.name = name;\n        this.sellIn = sellIn;\n        this.quality = quality;\n    }\n\n   @Override\n   public String toString() {\n        return this.name + \", \" + this.sellIn + \", \" + this.quality;\n    }\n}\n","TexttestFixture.java":"package com.gildedrose;\n\npublic class TexttestFixture {\n    public static void main(String[] args) {\n        System.out.println(\"OMGHAI!\");\n\n        Item[] items = new Item[] {\n                new Item(\"+5 Dexterity Vest\", 10, 20), //\n                new Item(\"Aged Brie\", 2, 0), //\n                new Item(\"Elixir of the Mongoose\", 5, 7), //\n                new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80), //\n                new Item(\"Sulfuras, Hand of Ragnaros\", -1, 80),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 15, 20),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 49),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 49),\n                // this conjured item does not work properly yet\n                new Item(\"Conjured Mana Cake\", 3, 6) };\n\n        GildedRose app = new GildedRose(items);\n\n        int days = 2;\n        if (args.length > 0) {\n            days = Integer.parseInt(args[0]) + 1;\n        }\n\n        for (int i = 0; i < days; i++) {\n            System.out.println(\"-------- day \" + i + \" --------\");\n            System.out.println(\"name, sellIn, quality\");\n            for (Item item : items) {\n                System.out.println(item);\n            }\n            System.out.println();\n            app.updateQuality();\n        }\n    }\n\n}\n"}