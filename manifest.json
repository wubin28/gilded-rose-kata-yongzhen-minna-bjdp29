{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"GiledeRose.java:61: error: method updateQuality() is already defined in class GildedRose\n   public void updateQuality() {\n               ^\n1 error\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","GiledeRose.java":"class GildedRose {\n    Item[] items;\n\n    public GildedRose(Item[] items) {\n        this.items = items;\n    }\n\n    public void updateQuality() {\n        for (int i = 0; i < items.length; i++) {\n            if (!items[i].name.equals(\"Aged Brie\")\n                    && !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                if (items[i].quality > 0) {\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].quality = items[i].quality - 1;\n                    }\n                }\n            } else {\n                if (items[i].quality < 50) {\n                    items[i].quality = items[i].quality + 1;\n\n                    if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].sellIn < 11) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn < 6) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                items[i].sellIn = items[i].sellIn - 1;\n            }\n\n            if (items[i].sellIn < 0) {\n                if (!items[i].name.equals(\"Aged Brie\")) {\n                    if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality > 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n                } else {\n                    if (items[i].quality < 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n                }\n            }\n        }\n    }\n\n   public void updateQuality() {\n     for (int i = 0; i < items.length; i++) {\n        if(isSellInLess0(items[i]))\n          items[i].quality -= 2;\n     }\n  }\n   \n  public boolean isSellInLess0(Item item) {\n    return (item.sellIn <=0) ;\n }\n}\n","GildedRoseTest.java":"import static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class GildedRoseTest {\n\n    @Test\n    public void foo() {\n        Item[] items = new Item[] { new Item(\"foo\", 0, 0) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(\"foo\", app.items[0].name);\n    }\n\n/*\n    @Test\n    public void testQualityDegradeTwice() {\n        Item[] items = new Item[] { new Item(\"foo\", 0, 7) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(5, app.items[0].quality);\n    }\n\n    @Test\n    public void testQualityWhen0() {\n        Item[] items = new Item[] { new Item(\"foo\", 0, 0) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(0, app.items[0].quality);\n    }\n\n    @Test\n    public void testQualityIncreaseForAgedBrie() {\n        Item[] items = new Item[] { new Item(\"Aged Brie\", 5, 7) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertTrue(app.items[0].quality > 7);\n    }\n\n    @Test\n    public void testQualityIncreaseForAgedBrieAlwaysLess50() {\n        Item[] items = new Item[] { new Item(\"Aged Brie\", 5, 50) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertTrue(app.items[0].quality == 50);\n    }\n\n    @Test\n    public void testSulfuras() {\n        Item[] items = new Item[] { new Item(\"Sulfuras, Hand of Ragnaros\", 5, 80) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(80, app.items[0].quality);\n        app.updateQuality();\n        assertEquals(80, app.items[0].quality);\n        app.updateQuality();\n        assertEquals(80, app.items[0].quality);\n    }\n\n    @Test\n    public void testBackstagePassesBiggerThan10() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 40) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(41, app.items[0].quality);\n}\n\n    @Test\n    public void testBackstagePassesBetween5And10() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 40) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(42, app.items[0].quality);\n    }\n\n    @Test\n    public void testBackstagePassesBetween0And5() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 40) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(43, app.items[0].quality);\n    }\n\n    @Test\n    public void testBackstagePassesWhen0() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 0, 40) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(0, app.items[0].quality);\n    }\n\n    @Test\n    public void testQualityAlwaysLessThan50() {\n        Item[] items = new Item[] { new Item(\"Backstage passes to a TAFKAL80ETC concert\", 6, 49) };\n        GildedRose app = new GildedRose(items);\n        app.updateQuality();\n        assertEquals(50, app.items[0].quality);\n    }\n\n*/\n}\n","Item.java":"public class Item {\n\n    public String name;\n\n    public int sellIn;\n\n    public int quality;\n\n    public Item(String name, int sellIn, int quality) {\n        this.name = name;\n        this.sellIn = sellIn;\n        this.quality = quality;\n    }\n\n   @Override\n   public String toString() {\n        return this.name + \", \" + this.sellIn + \", \" + this.quality;\n    }\n}\n","TexttestFixture.java":"public class TexttestFixture {\n    public static void main(String[] args) {\n        System.out.println(\"OMGHAI!\");\n\n        Item[] items = new Item[] {\n                new Item(\"+5 Dexterity Vest\", 10, 20), //\n                new Item(\"Aged Brie\", 2, 0), //\n                new Item(\"Elixir of the Mongoose\", 5, 7), //\n                new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80), //\n                new Item(\"Sulfuras, Hand of Ragnaros\", -1, 80),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 15, 20),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 49),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 49),\n                // this conjured item does not work properly yet\n                new Item(\"Conjured Mana Cake\", 3, 6) };\n\n        GildedRose app = new GildedRose(items);\n\n        int days = 2;\n        if (args.length > 0) {\n            days = Integer.parseInt(args[0]) + 1;\n        }\n\n        for (int i = 0; i < days; i++) {\n            System.out.println(\"-------- day \" + i + \" --------\");\n            System.out.println(\"name, sellIn, quality\");\n            for (Item item : items) {\n                System.out.println(item);\n            }\n            System.out.println();\n            app.updateQuality();\n        }\n    }\n\n}\n"}